{"ast":null,"code":"/* eslint @typescript-eslint/no-var-requires: \"off\" */\nimport referralABI from 'config/abi/referral.json';\nimport { getReferralAddress } from 'utils/addressHelpers';\nimport { getWeb3 } from 'utils/web3';\n\nconst CryptoJS = require('crypto-js');\n\nconst web3 = getWeb3();\nconst referralContract = new web3.eth.Contract(referralABI, getReferralAddress());\nconst secretKey = CryptoJS.enc.Utf8.parse(process.env.REACT_APP_SECRET_KEY);\nconst hexPrefix = '0x';\nconst zeroAddress = `${hexPrefix}0000000000000000000000000000000000000000`;\nconst martianRefCodeCookieKey = 'martian_finance_referral_code';\nexport const generateReferralLink = account => {\n  const simplifieldAccount = account.replace(hexPrefix, '');\n  const code = CryptoJS.Rabbit.encrypt(simplifieldAccount, secretKey, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.NoPadding\n  }).toString().replace('==', '');\n  return `${process.env.REACT_APP_BASE_URL}?ref=${code}`;\n};\nexport function getReferralCookie() {\n  const martianCookie = document.cookie.split('; ').find(row => row.startsWith(`{martianRefCodeCookieKey}=`));\n\n  if (typeof martianCookie === 'undefined') {\n    return '';\n  }\n\n  return martianCookie.split('=')[1];\n}\nexport async function setReferralCode(referralCode, account) {\n  const searchParams = new URLSearchParams(referralCode);\n  const isRefNotExists = searchParams.get('ref') === null;\n  const isAccountNotExist = account === null;\n\n  if (isRefNotExists || isAccountNotExist) {\n    return false;\n  }\n\n  const hasExistingCookie = getReferralCookie();\n  const referrerAddress = await referralContract.methods.getReferrer(account).call();\n  const hasExistingReferrer = referrerAddress !== zeroAddress;\n\n  if (hasExistingCookie || hasExistingReferrer) {\n    return false;\n  } // using searchParams.get('ref') functions removes some characters from the url\n\n\n  const cleanRefferalCode = `${referralCode.replace('?ref=', '')}==`;\n  const decryptedReferrereAddress = CryptoJS.Rabbit.decrypt(cleanRefferalCode, secretKey, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.NoPadding\n  }).toString(CryptoJS.enc.Utf8);\n  const referrereAddress = `${hexPrefix}${decryptedReferrereAddress}`;\n\n  if (account === referrereAddress) {\n    return false;\n  }\n\n  if (document.cookie.indexOf(martianRefCodeCookieKey) === -1) {\n    document.cookie = `${martianRefCodeCookieKey}=${cleanRefferalCode}`;\n  }\n\n  return true;\n}\nexport function getReferralCode() {\n  const cookieValue = getReferralCookie();\n\n  if (!cookieValue) {\n    return zeroAddress;\n  }\n\n  const decryptedReferrereAddress = CryptoJS.Rabbit.decrypt(cookieValue, secretKey, {\n    mode: CryptoJS.mode.ECB,\n    padding: CryptoJS.pad.NoPadding\n  }).toString(CryptoJS.enc.Utf8);\n  const referrereAddress = `${hexPrefix}${decryptedReferrereAddress}`;\n  document.cookie = `${martianRefCodeCookieKey}=; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\n  return referrereAddress;\n}\nexport default generateReferralLink;","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/utils/referrals.ts"],"names":["referralABI","getReferralAddress","getWeb3","CryptoJS","require","web3","referralContract","eth","Contract","secretKey","enc","Utf8","parse","process","env","REACT_APP_SECRET_KEY","hexPrefix","zeroAddress","martianRefCodeCookieKey","generateReferralLink","account","simplifieldAccount","replace","code","Rabbit","encrypt","mode","ECB","padding","pad","NoPadding","toString","REACT_APP_BASE_URL","getReferralCookie","martianCookie","document","cookie","split","find","row","startsWith","setReferralCode","referralCode","searchParams","URLSearchParams","isRefNotExists","get","isAccountNotExist","hasExistingCookie","referrerAddress","methods","getReferrer","call","hasExistingReferrer","cleanRefferalCode","decryptedReferrereAddress","decrypt","referrereAddress","indexOf","getReferralCode","cookieValue"],"mappings":"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","sourcesContent":["/* eslint @typescript-eslint/no-var-requires: \"off\" */\r\nimport { AbiItem } from 'web3-utils'\r\nimport referralABI from 'config/abi/referral.json'\r\nimport { getReferralAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst CryptoJS = require('crypto-js')\r\n\r\nconst web3 = getWeb3()\r\nconst referralContract = new web3.eth.Contract(referralABI as unknown as AbiItem, getReferralAddress())\r\nconst secretKey = CryptoJS.enc.Utf8.parse(process.env.REACT_APP_SECRET_KEY)\r\nconst hexPrefix = '0x'\r\nconst zeroAddress = `${hexPrefix}0000000000000000000000000000000000000000`\r\nconst martianRefCodeCookieKey = 'martian_finance_referral_code'\r\n\r\nexport const generateReferralLink = (account) => {\r\n  const simplifieldAccount = account.replace(hexPrefix, '')\r\n  const code = CryptoJS.Rabbit.encrypt(simplifieldAccount, secretKey, {\r\n    mode: CryptoJS.mode.ECB,\r\n    padding: CryptoJS.pad.NoPadding,\r\n  })\r\n    .toString()\r\n    .replace('==', '')\r\n\r\n  return `${process.env.REACT_APP_BASE_URL}?ref=${code}`\r\n}\r\n\r\nexport function getReferralCookie() {\r\n  const martianCookie = document.cookie.split('; ').find((row) => row.startsWith(`{martianRefCodeCookieKey}=`))\r\n\r\n  if (typeof martianCookie === 'undefined') {\r\n    return ''\r\n  }\r\n\r\n  return martianCookie.split('=')[1]\r\n}\r\n\r\nexport async function setReferralCode(referralCode, account) {\r\n  const searchParams = new URLSearchParams(referralCode)\r\n  const isRefNotExists = searchParams.get('ref') === null\r\n  const isAccountNotExist = account === null\r\n  if (isRefNotExists || isAccountNotExist) {\r\n    return false\r\n  }\r\n\r\n  const hasExistingCookie = getReferralCookie()\r\n  const referrerAddress = await referralContract.methods.getReferrer(account).call()\r\n  const hasExistingReferrer = referrerAddress !== zeroAddress\r\n  if (hasExistingCookie || hasExistingReferrer) {\r\n    return false\r\n  }\r\n\r\n  // using searchParams.get('ref') functions removes some characters from the url\r\n  const cleanRefferalCode = `${referralCode.replace('?ref=', '')}==`\r\n  const decryptedReferrereAddress = CryptoJS.Rabbit.decrypt(cleanRefferalCode, secretKey, {\r\n    mode: CryptoJS.mode.ECB,\r\n    padding: CryptoJS.pad.NoPadding,\r\n  }).toString(CryptoJS.enc.Utf8)\r\n  const referrereAddress = `${hexPrefix}${decryptedReferrereAddress}`\r\n\r\n  if (account === referrereAddress) {\r\n    return false\r\n  }\r\n\r\n  if (document.cookie.indexOf(martianRefCodeCookieKey) === -1) {\r\n    document.cookie = `${martianRefCodeCookieKey}=${cleanRefferalCode}`\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function getReferralCode() {\r\n  const cookieValue = getReferralCookie()\r\n  if (!cookieValue) {\r\n    return zeroAddress\r\n  }\r\n\r\n  const decryptedReferrereAddress = CryptoJS.Rabbit.decrypt(cookieValue, secretKey, {\r\n    mode: CryptoJS.mode.ECB,\r\n    padding: CryptoJS.pad.NoPadding,\r\n  }).toString(CryptoJS.enc.Utf8)\r\n\r\n  const referrereAddress = `${hexPrefix}${decryptedReferrereAddress}`\r\n\r\n  document.cookie = `${martianRefCodeCookieKey}=; expires=Thu, 01 Jan 1970 00:00:00 UTC;`\r\n\r\n  return referrereAddress\r\n}\r\n\r\nexport default generateReferralLink\r\n"]},"metadata":{},"sourceType":"module"}