{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport cakeABI from 'config/abi/cake.json';\nimport wbnbABI from 'config/abi/weth.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getWbnbAddress } from 'utils/addressHelpers';\nimport BigNumber from 'bignumber.js';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter(p => p.sousId !== 0);\n  const callsStartBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'startBlock'\n    };\n  });\n  const callsEndBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: poolConfig.contractAddress[CHAIN_ID],\n      name: 'bonusEndBlock'\n    };\n  });\n  const starts = await multicall(sousChefABI, callsStartBlock);\n  const ends = await multicall(sousChefABI, callsEndBlock);\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index];\n    const endBlock = ends[index];\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON()\n    };\n  });\n};\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter(p => p.stakingTokenName !== QuoteToken.BNB);\n  const bnbPool = poolsConfig.filter(p => p.stakingTokenName === QuoteToken.BNB);\n  const callsNonBnbPools = nonBnbPools.map(poolConfig => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]]\n    };\n  });\n  const callsBnbPools = bnbPool.map(poolConfig => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [poolConfig.contractAddress[CHAIN_ID]]\n    };\n  });\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools);\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools);\n  return [...nonBnbPools.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()\n  })), ...bnbPool.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON()\n  }))];\n};","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","wbnbABI","QuoteToken","multicall","getWbnbAddress","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStatking","nonBnbPools","stakingTokenName","BNB","bnbPool","callsNonBnbPools","stakingTokenAddress","params","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked"],"mappings":"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","sourcesContent":["import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport wbnbABI from 'config/abi/weth.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWbnbAddress } from 'utils/addressHelpers'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\r\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    }\r\n  })\r\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    }\r\n  })\r\n\r\n  const starts = await multicall(sousChefABI, callsStartBlock)\r\n  const ends = await multicall(sousChefABI, callsEndBlock)\r\n\r\n  return poolsWithEnd.map((cakePoolConfig, index) => {\r\n    const startBlock = starts[index]\r\n    const endBlock = ends[index]\r\n    return {\r\n      sousId: cakePoolConfig.sousId,\r\n      startBlock: new BigNumber(startBlock).toJSON(),\r\n      endBlock: new BigNumber(endBlock).toJSON(),\r\n    }\r\n  })\r\n}\r\n\r\nexport const fetchPoolsTotalStatking = async () => {\r\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\n\r\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\r\n    return {\r\n      address: poolConfig.stakingTokenAddress,\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const callsBnbPools = bnbPool.map((poolConfig) => {\r\n    return {\r\n      address: getWbnbAddress(),\r\n      name: 'balanceOf',\r\n      params: [poolConfig.contractAddress[CHAIN_ID]],\r\n    }\r\n  })\r\n\r\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\r\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\r\n\r\n  return [\r\n    ...nonBnbPools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n    ...bnbPool.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}