{"ast":null,"code":"var _jsxFileName = \"/Users/samuelchng/spartandefi/spartan-frontendfarms/src/components/DigitTimer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useI18n from 'hooks/useI18n';\nimport Countdown, { zeroPad } from 'react-countdown';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CountdownText = styled.span`\n  font-size: 16px;\n  color: #ffffff;\n  background: ${props => props.theme.card.background};\n  border-radius: 16px;\n  width: 230px;\n  margin-top: 5px;\n  margin-bottom: 16px;\n  display: flex;\n  flex-direction: column;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n  }\n`;\n_c = CountdownText;\n\nconst TimerModal = ({\n  heading,\n  text,\n  timeStamp\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const dispatch = useDispatch();\n  const [countdownDate, setCountdownDate] = useState(timeStamp);\n\n  const CountdownTime = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed\n  }) => {\n    return /*#__PURE__*/_jsxDEV(CountdownText, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), !completed ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '32px',\n            paddingTop: '10px',\n            paddingBottom: '5px',\n            color: '#FFFFFF',\n            fontWeight: 800\n          },\n          children: [zeroPad(days), \" : \", zeroPad(hours), \" : \", zeroPad(minutes), \" : \", zeroPad(seconds)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Days : Hours : Minutes : Seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Countdown, {\n    date: countdownDate,\n    zeroPadTime: 2,\n    renderer: CountdownTime\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TimerModal, \"4Vgq7n4sR66vEGAVnDod7eOK/Qc=\", false, function () {\n  return [useI18n, useDispatch];\n});\n\n_c2 = TimerModal;\nexport default TimerModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CountdownText\");\n$RefreshReg$(_c2, \"TimerModal\");","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/components/DigitTimer.tsx"],"names":["React","useState","useI18n","Countdown","zeroPad","useDispatch","styled","CountdownText","span","props","theme","card","background","mediaQueries","lg","TimerModal","heading","text","timeStamp","TranslateString","dispatch","countdownDate","setCountdownDate","CountdownTime","days","hours","minutes","seconds","completed","fontSize","paddingTop","paddingBottom","color","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,IAAoBC,OAApB,QAAmC,iBAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAQA,MAAMC,aAAa,GAAGD,MAAM,CAACE,IAAK;AAClC;AACA;AACA,gBAAiBC,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBC,UAAW;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACG,YAAN,CAAmBC,EAAG;AACzC;AACA;AACA,CAdA;KAAMP,a;;AAgBN,MAAMQ,UAAqC,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA;AAAhB,CAAD,KAAiC;AAAA;;AAC7E,QAAMC,eAAe,GAAGjB,OAAO,EAA/B;AACA,QAAMkB,QAAQ,GAAGf,WAAW,EAA5B;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAACiB,SAAD,CAAlD;;AAEA,QAAMK,aAAa,GAAG,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,OAAvB;AAAgCC,IAAAA;AAAhC,GAAD,KAAiD;AACrE,wBACI,QAAC,aAAD;AAAA,8BACA;AAAA,kBAAOZ;AAAP;AAAA;AAAA;AAAA;AAAA,cADA,EAEC,CAACY,SAAD,gBACG;AAAA,gCACI;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,QAAQ,EAAE,MAAZ;AAAoBC,YAAAA,UAAU,EAAE,MAAhC;AAAwCC,YAAAA,aAAa,EAAE,KAAvD;AAA8DC,YAAAA,KAAK,EAAE,SAArE;AAAgFC,YAAAA,UAAU,EAAE;AAA5F,WAAb;AAAA,qBAAiH7B,OAAO,CAACoB,IAAD,CAAxH,SAAmIpB,OAAO,CAACqB,KAAD,CAA1I,SAAsJrB,OAAO,CAACsB,OAAD,CAA7J,SAA2KtB,OAAO,CAACuB,OAAD,CAAlL;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,sBADH,gBAMG;AAAA,+BACI;AAAA,oBAAOV;AAAP;AAAA;AAAA;AAAA;AAAA;AADJ,uBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAeD,GAhBD;;AAmBA,sBACE,QAAC,SAAD;AAAW,IAAA,IAAI,EAAEI,aAAjB;AAAgC,IAAA,WAAW,EAAE,CAA7C;AAAgD,IAAA,QAAQ,EAAEE;AAA1D;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CA3BD;;GAAMR,U;UACoBb,O,EACPG,W;;;MAFbU,U;AA6BN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Countdown, { zeroPad } from 'react-countdown'\r\nimport { useDispatch } from 'react-redux'\r\nimport styled from 'styled-components'\r\n\r\ninterface DigitTimerProps {\r\n  heading: string\r\n  text: string\r\n  timeStamp?: any\r\n}\r\n\r\nconst CountdownText = styled.span`\r\n  font-size: 16px;\r\n  color: #ffffff;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 16px;\r\n  width: 230px;\r\n  margin-top: 5px;\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nconst TimerModal: React.FC<DigitTimerProps> = ({heading, text, timeStamp }) => {\r\n  const TranslateString = useI18n()\r\n  const dispatch = useDispatch()\r\n  const [countdownDate, setCountdownDate] = useState(timeStamp)\r\n\r\n  const CountdownTime = ({days, hours, minutes, seconds, completed }) => {\r\n    return (\r\n        <CountdownText>\r\n        <span>{heading}</span>\r\n        {!completed ?\r\n            <>\r\n                <span style={{ fontSize: '32px', paddingTop: '10px', paddingBottom: '5px', color: '#FFFFFF', fontWeight: 800 }}>{zeroPad(days)} : {zeroPad(hours)} : {zeroPad(minutes)} : {zeroPad(seconds)}</span>\r\n                <span>Days : Hours : Minutes : Seconds</span>\r\n            </>\r\n            :\r\n            <>\r\n                <span>{text}</span>\r\n            </>\r\n        }\r\n    </CountdownText>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <Countdown date={countdownDate} zeroPadTime={2} renderer={CountdownTime}/>\r\n  )\r\n}\r\n\r\nexport default TimerModal\r\n"]},"metadata":{},"sourceType":"module"}