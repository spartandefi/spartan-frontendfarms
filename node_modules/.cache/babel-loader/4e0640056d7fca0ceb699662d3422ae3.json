{"ast":null,"code":"var _jsxFileName = \"/Users/samuelchng/spartandefi/spartan-frontendfarms/src/views/Nft/components/NftGlobalNotification.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json';\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts';\nimport multicall from 'utils/multicall';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`;\n_c = ModalContent;\nconst Actions = styled.div`\n  text-align: center;\n`;\n_c2 = Actions;\n\nconst NftYouWonModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, 'Congratulations!'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/present.svg\",\n        alt: \"You won present\",\n        style: {\n          height: '64px',\n          marginBottom: '24px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        size: \"lg\",\n        color: \"secondary\",\n        children: TranslateString(999, 'You won an NFT!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        as: \"a\",\n        href: \"/nft\",\n        children: TranslateString(999, 'Go to claim NFT')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\n\n\n_s(NftYouWonModal, \"SC/Zc+rnUQSfBje7TuuyRy0lI/g=\", false, function () {\n  return [useI18n];\n});\n\n_c3 = NftYouWonModal;\n\nconst NftGlobalNotification = () => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const [onPresentBurnModal] = useModal( /*#__PURE__*/_jsxDEV(NftYouWonModal, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 41\n  }, this));\n  const showModal = useRef(() => onPresentBurnModal());\n  useEffect(() => {\n    const checkNftStatus = async () => {\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(rabbitmintingfarm, [{\n        address: RABBIT_MINTING_FARM_ADDRESS,\n        name: 'totalSupplyDistributed'\n      }, {\n        address: RABBIT_MINTING_FARM_ADDRESS,\n        name: 'currentDistributedSupply'\n      }, {\n        address: RABBIT_MINTING_FARM_ADDRESS,\n        name: 'canClaim',\n        params: [account]\n      }, {\n        address: RABBIT_MINTING_FARM_ADDRESS,\n        name: 'hasClaimed',\n        params: [account]\n      }]); // TODO: Figure out why these values are coming back as an array\n\n      const [totalSupplyDistributed] = totalSupplyDistributedArr;\n      const [currentDistributedSupply] = currentDistributedSupplyArr;\n      const [canClaim] = canClaimArr;\n      const [hasClaimed] = hasClaimedArr;\n\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n        showModal.current();\n      }\n    };\n\n    if (account && !document.location.href.includes('/nft')) {\n      checkNftStatus();\n    }\n  }, [account, showModal]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(NftGlobalNotification, \"Yy5a9ZQzHVPT9rKOOTbcTvST1So=\", false, function () {\n  return [useWallet, useModal];\n});\n\n_c4 = NftGlobalNotification;\nexport default NftGlobalNotification;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ModalContent\");\n$RefreshReg$(_c2, \"Actions\");\n$RefreshReg$(_c3, \"NftYouWonModal\");\n$RefreshReg$(_c4, \"NftGlobalNotification\");","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/views/Nft/components/NftGlobalNotification.tsx"],"names":["React","useEffect","useRef","styled","Button","Heading","Modal","useModal","useI18n","useWallet","rabbitmintingfarm","RABBIT_MINTING_FARM_ADDRESS","multicall","ModalContent","div","Actions","NftYouWonModal","onDismiss","TranslateString","height","marginBottom","NftGlobalNotification","account","onPresentBurnModal","showModal","checkNftStatus","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","address","name","params","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","href","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n"]},"metadata":{},"sourceType":"module"}