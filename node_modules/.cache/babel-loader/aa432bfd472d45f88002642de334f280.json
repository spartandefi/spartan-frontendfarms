{"ast":null,"code":"import presaleABI from 'config/abi/presale.json';\nimport busdABI from 'config/abi/busd.json';\nimport { getBusdAddress, getCakeAddress, getPresaleAddress } from 'utils/addressHelpers';\nimport { getWeb3 } from 'utils/web3';\nimport BigNumber from 'bignumber.js';\nconst web3 = getWeb3();\nconst busdContract = new web3.eth.Contract(busdABI, getBusdAddress());\nconst cakeContract = new web3.eth.Contract(busdABI, getCakeAddress());\nconst presaleContract = new web3.eth.Contract(presaleABI, getPresaleAddress());\nexport const fetchUserPresaleAllowances = async address => {\n  const presaleAllowances = await busdContract.methods.allowance(address, getPresaleAddress()).call();\n  return new BigNumber(presaleAllowances);\n};\nexport const fetchUserPresaleBalance = async address => {\n  const busdBalance = await busdContract.methods.balanceOf(address).call();\n  const cakeBalance = await cakeContract.methods.balanceOf(address).call();\n  return [new BigNumber(busdBalance), new BigNumber(cakeBalance)];\n};\nexport const fetchUserTokensUnclaimed = async address => {\n  const tokensUnclaimed = await presaleContract.methods.tokensUnclaimed(address).call();\n  return new BigNumber(tokensUnclaimed);\n};","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/state/presale/fetchUserPresale.ts"],"names":["presaleABI","busdABI","getBusdAddress","getCakeAddress","getPresaleAddress","getWeb3","BigNumber","web3","busdContract","eth","Contract","cakeContract","presaleContract","fetchUserPresaleAllowances","address","presaleAllowances","methods","allowance","call","fetchUserPresaleBalance","busdBalance","balanceOf","cakeBalance","fetchUserTokensUnclaimed","tokensUnclaimed"],"mappings":"AACA,OAAOA,UAAP,MAAuB,yBAAvB;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,iBAAzC,QAAkE,sBAAlE;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,IAAI,GAAGF,OAAO,EAApB;AACA,MAAMG,YAAY,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBT,OAAtB,EAAqDC,cAAc,EAAnE,CAArB;AACA,MAAMS,YAAY,GAAG,IAAIJ,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBT,OAAtB,EAAqDE,cAAc,EAAnE,CAArB;AACA,MAAMS,eAAe,GAAG,IAAIL,IAAI,CAACE,GAAL,CAASC,QAAb,CAAsBV,UAAtB,EAAwDI,iBAAiB,EAAzE,CAAxB;AAEA,OAAO,MAAMS,0BAA0B,GAAG,MAAOC,OAAP,IAAmB;AACzD,QAAMC,iBAAiB,GAAG,MAAMP,YAAY,CAACQ,OAAb,CAAqBC,SAArB,CAA+BH,OAA/B,EAAwCV,iBAAiB,EAAzD,EAA6Dc,IAA7D,EAAhC;AACA,SAAO,IAAIZ,SAAJ,CAAcS,iBAAd,CAAP;AACH,CAHM;AAKP,OAAO,MAAMI,uBAAuB,GAAG,MAAOL,OAAP,IAAmB;AACtD,QAAMM,WAAW,GAAG,MAAMZ,YAAY,CAACQ,OAAb,CAAqBK,SAArB,CAA+BP,OAA/B,EAAwCI,IAAxC,EAA1B;AACA,QAAMI,WAAW,GAAG,MAAMX,YAAY,CAACK,OAAb,CAAqBK,SAArB,CAA+BP,OAA/B,EAAwCI,IAAxC,EAA1B;AACA,SAAO,CAAC,IAAIZ,SAAJ,CAAcc,WAAd,CAAD,EAA6B,IAAId,SAAJ,CAAcgB,WAAd,CAA7B,CAAP;AACH,CAJM;AAMP,OAAO,MAAMC,wBAAwB,GAAG,MAAOT,OAAP,IAAmB;AACvD,QAAMU,eAAe,GAAG,MAAMZ,eAAe,CAACI,OAAhB,CAAwBQ,eAAxB,CAAwCV,OAAxC,EAAiDI,IAAjD,EAA9B;AACA,SAAO,IAAIZ,SAAJ,CAAckB,eAAd,CAAP;AACH,CAHM","sourcesContent":["import { AbiItem } from 'web3-utils'\r\nimport presaleABI from 'config/abi/presale.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport busdABI from 'config/abi/busd.json'\r\nimport { getBusdAddress, getCakeAddress, getPresaleAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst web3 = getWeb3()\r\nconst busdContract = new web3.eth.Contract(busdABI as unknown as AbiItem, getBusdAddress())\r\nconst cakeContract = new web3.eth.Contract(busdABI as unknown as AbiItem, getCakeAddress())\r\nconst presaleContract = new web3.eth.Contract(presaleABI as unknown as AbiItem, getPresaleAddress())\r\n\r\nexport const fetchUserPresaleAllowances = async (address) => {\r\n    const presaleAllowances = await busdContract.methods.allowance(address, getPresaleAddress()).call()\r\n    return new BigNumber(presaleAllowances)\r\n}\r\n\r\nexport const fetchUserPresaleBalance = async (address) => {\r\n    const busdBalance = await busdContract.methods.balanceOf(address).call()\r\n    const cakeBalance = await cakeContract.methods.balanceOf(address).call()\r\n    return [new BigNumber(busdBalance), new BigNumber(cakeBalance)]\r\n}\r\n\r\nexport const fetchUserTokensUnclaimed = async (address) => {\r\n    const tokensUnclaimed = await presaleContract.methods.tokensUnclaimed(address).call()\r\n    return new BigNumber(tokensUnclaimed)\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}