{"ast":null,"code":"var _jsxFileName = \"/Users/samuelchng/spartandefi/spartan-frontendfarms/src/views/Presale/components/BuyModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Modal } from '@pancakeswap-libs/uikit';\nimport ModalActions from 'components/ModalActions';\nimport TokenInput from 'components/TokenInput';\nimport useI18n from 'hooks/useI18n';\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BuyModal = ({\n  max,\n  tokenName = \"\",\n  onConfirm,\n  onDismiss,\n  tokensUnclaimed,\n  tokenBalance,\n  tokensLeft\n}) => {\n  _s();\n\n  const [val, setVal] = useState('');\n  const [pendingTx, setPendingTx] = useState(false);\n  const TranslateString = useI18n();\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n  const handleChange = useCallback(e => {\n    setVal(e.currentTarget.value);\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  const renderErrorMessage = () => {\n    let error = null;\n\n    if (parseInt(val) > getBalanceNumber(tokensLeft)) {\n      error = \"Not enough GOB left for sale!\";\n    }\n\n    return error;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: `${TranslateString(316, 'Buy')} ${tokenName} Tokens`,\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#fff'\n      },\n      children: renderErrorMessage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TokenInput, {\n      value: val,\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      max: fullBalance,\n      symbol: tokenName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: TranslateString(462, 'Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: parseInt(val) > getBalanceNumber(tokensLeft) || pendingTx,\n        onClick: async () => {\n          setPendingTx(true);\n          await onConfirm(val);\n          setPendingTx(false);\n          onDismiss();\n        },\n        children: pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BuyModal, \"6CJIGJ2Y3KmfnLsU3NCO1RJwS2U=\", false, function () {\n  return [useI18n];\n});\n\n_c = BuyModal;\nexport default BuyModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyModal\");","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/views/Presale/components/BuyModal.tsx"],"names":["React","useCallback","useMemo","useState","Button","Modal","ModalActions","TokenInput","useI18n","getBalanceNumber","getFullDisplayBalance","BuyModal","max","tokenName","onConfirm","onDismiss","tokensUnclaimed","tokenBalance","tokensLeft","val","setVal","pendingTx","setPendingTx","TranslateString","fullBalance","handleChange","e","currentTarget","value","handleSelectMax","renderErrorMessage","error","parseInt","color"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface BuyModalProps {\r\n    max: BigNumber\r\n    tokenName?: string\r\n    onConfirm: (amount: string) => void\r\n    onDismiss?: () => void\r\n    tokensUnclaimed?: BigNumber\r\n    tokenBalance?: BigNumber\r\n    tokensLeft?: BigNumber\r\n}\r\n\r\nconst BuyModal: React.FC<BuyModalProps> = ({ max, tokenName = \"\", onConfirm, onDismiss, tokensUnclaimed, tokenBalance, tokensLeft }) => {\r\n    const [val, setVal] = useState('')\r\n    const [pendingTx, setPendingTx] = useState(false)\r\n    const TranslateString = useI18n()\r\n    const fullBalance = useMemo(() => {\r\n        return getFullDisplayBalance(max)\r\n    }, [max])\r\n\r\n    const handleChange = useCallback(\r\n        (e: React.FormEvent<HTMLInputElement>) => {\r\n            setVal(e.currentTarget.value)\r\n        },\r\n        [setVal],\r\n    )\r\n\r\n    const handleSelectMax = useCallback(() => {\r\n        setVal(fullBalance)\r\n    }, [fullBalance, setVal])\r\n\r\n    const renderErrorMessage = () => {\r\n        let error = null;\r\n        if (parseInt(val) > getBalanceNumber(tokensLeft)) {\r\n            error = \"Not enough GOB left for sale!\"\r\n        }\r\n        return error;\r\n    }\r\n\r\n    return (\r\n        <Modal title={`${TranslateString(316, 'Buy')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n            <div style={{ color: '#fff' }}>{renderErrorMessage()}</div>\r\n            <TokenInput\r\n                value={val}\r\n                onSelectMax={handleSelectMax}\r\n                onChange={handleChange}\r\n                max={fullBalance}\r\n                symbol={tokenName}\r\n            />\r\n            <ModalActions>\r\n                {/* tochange */}\r\n                <Button variant=\"secondary\" onClick={onDismiss}>\r\n                    {TranslateString(462, 'Cancel')}\r\n                </Button>\r\n                <Button\r\n                    disabled={parseInt(val) > getBalanceNumber(tokensLeft) || pendingTx}\r\n                    onClick={async () => {\r\n                        setPendingTx(true)\r\n                        await onConfirm(val)\r\n                        setPendingTx(false)\r\n                        onDismiss()\r\n                    }}\r\n                >\r\n                    {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n                </Button>\r\n            </ModalActions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default BuyModal\r\n"]},"metadata":{},"sourceType":"module"}