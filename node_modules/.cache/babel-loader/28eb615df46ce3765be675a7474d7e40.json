{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport cakeABI from 'config/abi/cake.json';\nimport { getContract } from 'utils/web3';\nimport { getTokenBalance } from 'utils/erc20';\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport useRefresh from './useRefresh';\n\nconst useTokenBalance = tokenAddress => {\n  _s();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account);\n      setBalance(new BigNumber(res));\n    };\n\n    if (account && ethereum) {\n      fetchBalance();\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh]);\n  return balance;\n};\n\n_s(useTokenBalance, \"q62EJqLRbUrq+vqmuC+/Ex/Zzow=\", false, function () {\n  return [useWallet, useRefresh];\n});\n\nexport const useTotalSupply = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress());\n      const supply = await cakeContract.methods.totalSupply().call();\n      setTotalSupply(new BigNumber(supply));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress());\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();\n      setBalance(new BigNumber(bal));\n    };\n\n    fetchBalance();\n  }, [tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"qyENdKcKAtFXxHK1y11FyHVhXpA=\", false, function () {\n  return [useRefresh];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/samuelchng/spartandefi/spartan-frontendfarms/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","getContract","getTokenBalance","getCakeAddress","useRefresh","useTokenBalance","tokenAddress","balance","setBalance","account","ethereum","fastRefresh","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","methods","call","useBurnedBalance","bal","balanceOf"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,eAAe,GAAIC,YAAD,IAA0B;AAAA;;AAChD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAAtC;AACA,QAAM;AAAEW,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAiEX,SAAS,EAAhF;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAkBP,UAAU,EAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,YAAY,GAAG,YAAY;AAC/B,YAAMC,GAAG,GAAG,MAAMX,eAAe,CAACQ,QAAD,EAAWJ,YAAX,EAAyBG,OAAzB,CAAjC;AACAD,MAAAA,UAAU,CAAC,IAAIV,SAAJ,CAAce,GAAd,CAAD,CAAV;AACD,KAHD;;AAKA,QAAIJ,OAAO,IAAIC,QAAf,EAAyB;AACvBE,MAAAA,YAAY;AACb;AACF,GATQ,EASN,CAACH,OAAD,EAAUC,QAAV,EAAoBJ,YAApB,EAAkCK,WAAlC,CATM,CAAT;AAWA,SAAOJ,OAAP;AACD,CAjBD;;GAAMF,e;UAEmEN,S,EAC/CK,U;;;AAgB1B,OAAO,MAAMU,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAkBX,UAAU,EAAlC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAesB,gBAAf,GAAkC;AAChC,YAAMC,YAAY,GAAGlB,WAAW,CAACD,OAAD,EAAUG,cAAc,EAAxB,CAAhC;AACA,YAAMiB,MAAM,GAAG,MAAMD,YAAY,CAACE,OAAb,CAAqBL,WAArB,GAAmCM,IAAnC,EAArB;AACAL,MAAAA,cAAc,CAAC,IAAInB,SAAJ,CAAcsB,MAAd,CAAD,CAAd;AACD;;AAEDF,IAAAA,gBAAgB;AACjB,GARQ,EAQN,CAACH,WAAD,CARM,CAAT;AAUA,SAAOC,WAAP;AACD,CAfM;;IAAMF,c;UACaV,U;;;AAgB1B,OAAO,MAAMmB,gBAAgB,GAAIjB,YAAD,IAA0B;AAAA;;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAAtC;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAkBX,UAAU,EAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,YAAY,GAAG,YAAY;AAC/B,YAAMO,YAAY,GAAGlB,WAAW,CAACD,OAAD,EAAUG,cAAc,EAAxB,CAAhC;AACA,YAAMqB,GAAG,GAAG,MAAML,YAAY,CAACE,OAAb,CAAqBI,SAArB,CAA+B,4CAA/B,EAA6EH,IAA7E,EAAlB;AACAd,MAAAA,UAAU,CAAC,IAAIV,SAAJ,CAAc0B,GAAd,CAAD,CAAV;AACD,KAJD;;AAMAZ,IAAAA,YAAY;AACb,GARQ,EAQN,CAACN,YAAD,EAAeS,WAAf,CARM,CAAT;AAUA,SAAOR,OAAP;AACD,CAfM;;IAAMgB,gB;UAEanB,U;;;AAe1B,eAAeC,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"]},"metadata":{},"sourceType":"module"}